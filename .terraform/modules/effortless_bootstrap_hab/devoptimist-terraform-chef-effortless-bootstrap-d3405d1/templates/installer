%{ if system == "linux" }
#!/bin/bash
set -exu
exec > ${tmp_path}/hab_installer.log 2>&1

function install_jq {
  path="${tmp_path}/bin"
  if [[ ! -d "$${path}" ]]; then
    sudo mkdir -p $path
  fi

  jq_path="${tmp_path}/bin/jq"
  if [[ ! -f "$${jq_path}" ]]; then
    if hash curl; then
      sudo curl -L -o $${jq_path} ${jq_linux_url} && sudo chmod 755 $${jq_path}
    else
      sudo wget -O $${jq_path} ${jq_linux_url} && sudo chmod 755 $${jq_path}
    fi
  fi
}

function install_hab {
  if [[ ! -d /hab ]]; then
    curl -L -o ${tmp_path}/url_installer.sh ${hab_install_url} && sudo bash ${tmp_path}/url_installer.sh -v ${hab_version}
  fi
}

function install_effortless_package {
  sudo hab license accept
  sudo hab pkg install ${effortless_pkg}
}

function run_effortless_package {
  export PATH=$PATH:${tmp_path}/bin
  if [[ -f ${tmp_path}/dna_extra.json ]]; then
    jq -s '.[0] * .[1]' ${tmp_path}/dna_base.json ${tmp_path}/dna_extra.json > ${tmp_path}/dna.json
  else
    cat ${tmp_path}/dna_base.json > ${tmp_path}/dna.json
  fi

  service_name=$(echo "${effortless_pkg}" | awk -F'/' '{print $2}')
  service_dir=/hab/svc/$${service_name}/data/nodes

  pushd $(hab pkg path ${effortless_pkg})
    sudo $(hab pkg path $(grep "chef/chef-client" TDEPS))/bin/chef-client -z -j ${tmp_path}/dna.json
%{ if clear_node_data }
    sudo rm -rf $${service_dir}
%{ endif  }
  popd

}

install_jq
install_hab
install_effortless_package
run_effortless_package
%{ endif }

%{ if system == "windows" }

Set-MpPreference -DisableRealtimeMonitoring $true
Add-Type -AssemblyName System.IO.Compression.FileSystem

function Unzip {
  param([string]$zipfile, [string]$outpath)
  [System.IO.Compression.ZipFile]::ExtractToDirectory($zipfile, $outpath)
}

function dl_and_install($name, $url, $ag) {
  $Installer = $name
  $Ptarget = "${tmp_path}\$Installer"
  $ProgressPreference = 'SilentlyContinue'
  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
  Invoke-WebRequest $url -OutFile $Ptarget
  if ($Installer -like '*.zip') {
    Unzip "$Ptarget" "$ag"
  }
}

function install_jq {
  $tmp_bin = "${tmp_path}\bin"
  if(!(test-path $tmp_bin)) {
    New-Item -ItemType Directory -Force -Path $tmp_bin
  }

  $jq_path = "$${tmp_bin}\jq.exe"
  if(!(test-path $jq_path)) {
    $ProgressPreference = 'SilentlyContinue'
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Invoke-WebRequest ${jq_windows_url} -OutFile $jq_path
  }
}

function install_hab {
  if(!(test-path "C:\habitat")) {
    $env:Path += ";${tmp_path}\bin"
    $ProgressPreference = 'SilentlyContinue'
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    $release_path="${hab_install_url}/packages/habitat/stable/hab-x86_64-windows"
    $release=(Invoke-WebRequest $release_path).content| jq.exe -r '.versions[] | select(. | contains(\"${hab_version}\"))' 
    $package_name="hab-$release-x86_64-windows"
    $download_path="${hab_install_url}/content/habitat/stable/windows/x86_64/$package_name.zip?bt_package=hab-x86_64-windows"
    dl_and_install "habitat.zip" "$download_path" "C:\habitat"
    mv C:\habitat\hab-*\* C:\habitat\
  }
}

function install_effortless_package {
  $env:Path += ";C:\habitat\"
  hab license accept
  hab pkg install ${effortless_pkg}
}

function run_effortless_package {
  $env:Path += ";C:\habitat\"
  $env:Path += ";${tmp_path}\bin"
  if(Test-Path C:\effortless_bootstrap\dna_extra.json) {
    jq -s '.[0] * .[1]' C:\effortless_bootstrap\dna_base.json C:\effortless_bootstrap\dna_extra.json > C:\effortless_bootstrap\tmp_dna.json
    [System.IO.File]::WriteAllLines("${tmp_path}\dna.json", (Get-Content -Path ${tmp_path}\tmp_dna.json))
  }else {
    [System.IO.File]::WriteAllLines("${tmp_path}\dna.json", (Get-Content -Path ${tmp_path}\dna_base.json))
  }

  Push-Location $(hab pkg path ${effortless_pkg})
    Invoke-Expression "$(hab pkg path (Select-String -Pattern 'chef-client' -Path .\TDEPS | Out-String).Trim().split(':')[2])\bin\chef-client.bat -j ${tmp_path}\dna.json -z *>&1 > ${tmp_path}/effortless_run.log"
    $service_name = "${effortless_pkg}".split("/")[1]
%{ if clear_node_data }
    if(Test-Path "C:\hab\svc\$${service_name}\data\nodes") {
      Remove-Item -LiteralPath "C:\hab\svc\$service_name\data\nodes" -Force -Recurse
    }
%{ endif }
  Pop-Location
}

install_jq
install_hab
install_effortless_package
run_effortless_package
Set-MpPreference -DisableRealtimeMonitoring $false
%{ endif }
